‡¶¶‡¶æ‡¶∞‡ßÅ‡¶£ üëè ‚Äî ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá **modular structure** (service / controller / model / routes) ‡¶¶‡¶ø‡ßü‡ßá **Auth Module** ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßã, ‡¶∏‡ßá‡¶á ‡¶è‡¶ï‡¶á ‡¶ß‡¶æ‡¶Å‡¶ö‡ßá ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶∞‡¶æ **Post Module** ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßã‡•§

‡¶®‡ßÄ‡¶ö‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø:

1. **Folder structure** ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á
2. `post.model.ts` ‚Äì Mongoose schema/model
3. `post.service.ts` ‚Äì ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú CRUD ‡¶≤‡¶ú‡¶ø‡¶ï
4. `post.controller.ts` ‚Äì API ‡¶≤‡¶ú‡¶ø‡¶ï (req/res)
5. `post.routes.ts` ‚Äì ‡¶∏‡¶¨ ‡¶∞‡¶æ‡¶â‡¶ü
6. **Postman Test** ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ (request bodies, sample response)
7. ‡¶∂‡ßá‡¶∑‡ßá **‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ó‡¶æ‡¶á‡¶°**

---

## üóÇ 1. Folder Structure (modules/posts)

```
src/
 ‚îî‚îÄ modules/
     ‚îî‚îÄ posts/
         ‚îú‚îÄ post.model.ts
         ‚îú‚îÄ post.service.ts
         ‚îú‚îÄ post.controller.ts
         ‚îî‚îÄ post.routes.ts
```

---

## üìù 2. post.model.ts

```ts
import mongoose, { Schema, Document } from "mongoose";

export interface IPost extends Document {
  title: string;
  content: string;
  author: mongoose.Types.ObjectId;
  slug: string;
  tags?: string[];
  published: boolean;
  createdAt: Date;
  updatedAt: Date;
}

const PostSchema = new Schema<IPost>(
  {
    title: { type: String, required: true, trim: true },
    content: { type: String, required: true },
    author: { type: Schema.Types.ObjectId, ref: "User", required: true },
    slug: { type: String, required: true, unique: true },
    tags: [{ type: String }],
    published: { type: Boolean, default: false }
  },
  { timestamps: true }
);

export const PostModel = mongoose.model<IPost>("Post", PostSchema);
```

---

## ‚öôÔ∏è 3. post.service.ts

```ts
import { PostModel, IPost } from "./post.model";
import { Types } from "mongoose";
import slugify from "../../utils/slugify";

export const createPost = async (
  title: string,
  content: string,
  authorId: Types.ObjectId,
  tags?: string[]
): Promise<IPost> => {
  const slug = slugify(title);
  const newPost = await PostModel.create({
    title,
    content,
    author: authorId,
    slug,
    tags,
    published: false
  });
  return newPost;
};

export const getAllPosts = async (): Promise<IPost[]> => {
  return PostModel.find({}).populate("author", "name email");
};

export const getPostBySlug = async (slug: string): Promise<IPost | null> => {
  return PostModel.findOne({ slug }).populate("author", "name email");
};

export const updatePost = async (
  slug: string,
  data: Partial<IPost>
): Promise<IPost | null> => {
  if (data.title) data.slug = slugify(data.title);
  return PostModel.findOneAndUpdate({ slug }, data, { new: true });
};

export const deletePost = async (slug: string): Promise<IPost | null> => {
  return PostModel.findOneAndDelete({ slug });
};
```

---

## üéõ 4. post.controller.ts

```ts
import { Request, Response, NextFunction } from "express";
import * as postService from "./post.service";

export const createPostHandler = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { title, content, tags } = req.body;
    const authorId = req.user?._id; // auth middleware ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá
    if (!authorId) return res.status(401).json({ message: "Unauthorized" });

    const post = await postService.createPost(title, content, authorId, tags);
    res.status(201).json({ message: "Post created", data: post });
  } catch (error) {
    next(error);
  }
};

export const getAllPostsHandler = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const posts = await postService.getAllPosts();
    res.json({ data: posts });
  } catch (error) {
    next(error);
  }
};

export const getPostBySlugHandler = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const post = await postService.getPostBySlug(req.params.slug);
    if (!post) return res.status(404).json({ message: "Post not found" });
    res.json({ data: post });
  } catch (error) {
    next(error);
  }
};

export const updatePostHandler = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const post = await postService.updatePost(req.params.slug, req.body);
    if (!post) return res.status(404).json({ message: "Post not found" });
    res.json({ message: "Post updated", data: post });
  } catch (error) {
    next(error);
  }
};

export const deletePostHandler = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const post = await postService.deletePost(req.params.slug);
    if (!post) return res.status(404).json({ message: "Post not found" });
    res.json({ message: "Post deleted" });
  } catch (error) {
    next(error);
  }
};
```

---

## üöè 5. post.routes.ts

```ts
import { Router } from "express";
import {
  createPostHandler,
  getAllPostsHandler,
  getPostBySlugHandler,
  updatePostHandler,
  deletePostHandler
} from "./post.controller";
import { authMiddleware } from "../../middlewares/auth.middleware";

const router = Router();

router.get("/", getAllPostsHandler);
router.get("/:slug", getPostBySlugHandler);

router.post("/", authMiddleware, createPostHandler);
router.put("/:slug", authMiddleware, updatePostHandler);
router.delete("/:slug", authMiddleware, deletePostHandler);

export default router;
```

> ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ **`app.ts`** ‡¶¨‡¶æ **`index.ts`** ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã:

```ts
import postRoutes from "./modules/posts/post.routes";
app.use("/api/posts", postRoutes);
```

---

## üß™ 6. Postman ‡¶ü‡ßá‡¶∏‡ßç‡¶ü (‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£)

**Base URL:** `http://localhost:5000/api/posts`

### üîë 1) Create Post (POST /api/posts)

* Headers: `Cookie: accessToken=<your_token>`
* Body (JSON):

```json
{
  "title": "First Blog Post",
  "content": "This is the content of the first post",
  "tags": ["react", "backend"]
}
```

* Response (201):

```json
{
  "message": "Post created",
  "data": {
    "_id": "651a8f...",
    "title": "First Blog Post",
    "slug": "first-blog-post",
    "content": "This is the content of the first post",
    "author": "650d6c...",
    "tags": ["react","backend"],
    "published": false,
    "createdAt": "...",
    "updatedAt": "..."
  }
}
```

### üìú 2) Get All Posts (GET /api/posts)

Response:

```json
{
  "data": [
    {
      "title": "First Blog Post",
      "slug": "first-blog-post",
      "author": { "_id": "...", "name": "Emon" },
      ...
    }
  ]
}
```

### üîç 3) Get Single Post (GET /api/posts/:slug)

```http
GET /api/posts/first-blog-post
```

### ‚úèÔ∏è 4) Update Post (PUT /api/posts/:slug)

```json
{
  "title": "Updated Blog Post",
  "published": true
}
```

### ‚ùå 5) Delete Post (DELETE /api/posts/:slug)

---

## ‚ñ∂Ô∏è 7. ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤‡¶ø ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ

```bash
# dependencies ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤
npm install
npm run build
npm run dev   # nodemon + ts-node ‡¶π‡¶≤‡ßá
```

1. **MongoDB Atlas** connection string `.env`-‡¶è ‡¶¨‡¶∏‡¶æ‡¶ì

   ```
   MONGO_URI=your_mongo_atlas_url
   JWT_SECRET=your_jwt_secret
   PORT=5000
   ```
2. **Auth routes** ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶ó‡ßá `register` ‡¶ì `login` ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßã
3. ‡¶≤‡¶ó‡¶á‡¶®‡ßá‡¶∞ ‡¶™‡¶∞ **Set-Cookie** ‡¶•‡ßá‡¶ï‡ßá `accessToken` ‡¶®‡¶ø‡ßü‡ßá ‡¶™‡ßã‡¶∏‡ßç‡¶ü API ‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶ì

---

‚úÖ ‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø Post Module ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá ‡¶´‡ßá‡¶≤‡¶≤‡ßá ‡¶è‡¶¨‡¶Ç Postman ‡¶¶‡¶ø‡ßü‡ßá ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§
‚ö°Ô∏è ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶∏‡¶Æ‡ßü‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶á ‡¶Æ‡¶°‡¶ø‡¶â‡¶≤‡ßá **pagination, image upload, search/filter** ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã‡•§

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶ö‡¶æ‡¶ì ‡¶Ü‡¶Æ‡¶ø Postman collection `.json` ‡¶´‡¶æ‡¶á‡¶≤‡¶ì ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶á ‡¶Ø‡¶æ‡¶§‡ßá ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶≤‡ßá‡¶á ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü?
